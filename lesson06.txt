Задание 1
1. найдите информацию о том, как в Ubuntu открыть порт 80,443. Укажите как.
	sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
	sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT
	iptables-save > /etc/iptables.rules
2. Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!", где $user - это значение хидера 'User'.
иначе отправлять код 404 с текстом "Page not found".
	Устанавливаем nginx:
		sudo apt-get install nginx
	Конфигурируем свой виртуальный хост:
		vim /etc/nginx/conf.d/lesson06.ru
			
			server {
        			listen 80;
        			listen [::]:80;

        			server_name lesson06.ru;

        			location / {
                			if ($http_User != ""){
                        			return 200 "Hi $http_User!";
                			}
                			return 404 "Page not found";
        			}
			}

		sudo vim /etc/nginx/nginx.conf
			Изменяем строку include /etc/nginx/conf.d/*.conf; на include /etc/nginx/conf.d/*;
		
		sudo vim /etc/hosts
			Добавляем строчку: 192.168.1.123   lesson06.ru		

		systemctl restart nginx

3. Мне прислать конфиг nginx и команду curl, которую выполняете.
		curl -H "User: Aleksey" lesson06.ru
		Hi Aleksey!
		
		curl -H "User:" lesson06.ru
		Page not found

		curl lesson06.ru
		Page not found

Задание 2
1. найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для своего вэб сервера. 
Написать своими словами, что это такое и как сгенерить.
	Самоподписанный сертификат это сертификат не подписанныйпроверенным центром сертификации, т.е. он не позволяет подтвердить подлинность сайта. 
	Но при этом он позволяет защитить соединение с клиентами шифрованием.
	Создание сертификата:
	С помощью команды openssl генерируем закрытый ключ и открытый сертификат. При использовании OpenSSL нужно также создать ключи Диффи-Хеллмана. Далее настраиваем nginx.

2. добавить SSL соединение для дифолтного виртуального хоста nginx, используя порт 443. Прикрепить конфиги nginx.
	Создаем сниппет, указывающий место хранения файлов SSL-сертификата и ключа:
		sudo vim /etc/nginx/snippets/self-signed.conf
	Создаем другой сниппет, предназначенный для настроек SSL:
		sudo vim /etc/nginx/snippets/ssl-params.conf
	sudo vim /etc/nginx/sites-available/default
	server {
 	       listen 80 default_server;
 	       listen [::]:80 default_server;

 	       root /var/www/html;

  	      index index.html index.htm index.nginx-debian.html;
	
  	      server_name 192.168.1.123;
  	      return 302 https://$server_name$request_uri;
  	      location / {
  	              try_files $uri $uri/ =404;
   	}

	}
	server {
   		# SSL configuration
     	 	listen 443 ssl http2;
		listen [::]:443 ssl http2;
	        include snippets/self-signed.conf;
	        include snippets/ssl-params.conf;
	}

3. откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные сертификаты. Напишите, что видите.
	При попытке открыть страницу выводитс сообщение:
	Ваше подключение не защищено
	Безопасность вашего соединения снижена. Злоумышленники могут пытаться похитить ваши данные с сайта. Рекомендуется прекратить работу с сайтом.

	Веб-адрес:
	192.168.1.123

	Причина:
	Самоподписанный сертификат.

4. мы говорили о необходимости шифровать симметрично. При этом проблем с получением ассиметричных сертификатов нет. 
Зачем такая сложная схема для установления SSL соединения? Почему бы не шифровать ассиметрично? Своими словами.
	У ассиметричного шифрования есть свои недостатки:
		- Более низкая скорость зашифровки и расшифровки.
		- Зашита сообщений шифрованием возможна только от владельца открытого ключа к владельцу закрытого. Сообщения от владельца закрытого ключа смогут прочесть все владельцы открытого ключа.
